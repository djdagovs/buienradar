#!/usr/bin/python
#
# European/Dutch weather (rain and lightning) radar.
#
# This small application will display the dutch weather radar data provided by
# buienradar.nl and meteox.nl. It offers a choice between 1, 2, 3, 6, 12 and 24
# hour loops loops can be paused and navigated as well.
#
# (c)2009-2012 Dennis Kaarsemaker <dennis@kaarsemaker.net> This is free software,
# licensed under the GNU GPL, version 3 or later.
#
# Downloaded data is (c) buienradar.nl/meteox.nl, all rights reserved.

import array
from gi.repository import Gdk, Gtk, GLib
import cairo
import datetime
import Image
import logging
import math
import os
import sys
import urllib2
import yaml

import warnings
warnings.filterwarnings('ignore', 'could not open display')

__version__ = (2,0)

class BuienRadar(object):
    """BuienRadar GUI, display dutch weather radar images"""

    hour_choices = (1, 2, 3, 6, 12, 24)

    def __init__(self):
        """Initialize the GUI and internal data"""
        # Not playing yet
        self.last_step = 0
        self.playing = False
        self.dld = None
        self.init_logger(logging.INFO)
        self.ignore_errors = False

        with open(__file__+'.conf') as fd:
            self.countries = yaml.safe_load(fd)
        for key in self.countries:
            self.countries[key]['abbr'] = key
        self.country = self.countries['eu']
        self.seconds = 3600

    def create_gui(self, show_gui):
        self.show_gui = show_gui
        self.window = w = Gtk.Window(Gtk.WindowType.TOPLEVEL)
        w.set_title("Weather radar %s" % '.'.join(str(x) for x in __version__))
        w.connect("delete_event", self.quit)
        w.connect("destroy", self.quit)
        w.connect("key_release_event", self.key_release)
        w.set_icon_from_file(__file__ + '.png')
        w.set_resizable(False)

        vbox = Gtk.VBox()
        w.add(vbox)

        # Menubar
        mb = Gtk.MenuBar()
        vbox.pack_start(mb, False, False, 0)
        fmi = Gtk.MenuItem(label="Weather radar")
        mb.append(fmi)
        fm = Gtk.Menu()
        fmi.set_submenu(fm)

        for country in sorted(self.countries.values(), key=lambda x: x['abbr']):
            it = Gtk.MenuItem(country['country'])
            it.connect("activate", self.set_country, country)
            fm.append(it)

        it = Gtk.MenuItem("Clear cache")
        it.connect("activate", lambda event: self.radar.clear_cache(0))
        fm.append(it)

        it = Gtk.ImageMenuItem(Gtk.STOCK_QUIT)
        it.connect("activate", self.quit)
        fm.append(it)

        # Player interface
        hbox = Gtk.HBox()
        vbox.pack_start(hbox, False, False, 0)

        self.combo_box = b = Gtk.ComboBoxText()
        hbox.pack_start(b, False, False, 0)
        active = 0
        for n,i in enumerate(self.hour_choices):
            b.append_text('%d hour' % i)
        b.set_active(active)
        b.connect('changed', lambda src: self.set_seconds(int(src.get_active_text().split(None,1)[0]) * 3600))

        self.playbutton = b = Gtk.Button(stock=Gtk.STOCK_MEDIA_PLAY)
        b.set_use_stock(True)
        b.connect("clicked", self.toggle_playing)
        hbox.pack_start(b, False, False, 0)

        self.scale = s = Gtk.HScale()
        hbox.pack_start(s, True, True, 0)
        s.set_draw_value(False)
        s.set_range(0,1)
        s.connect('change-value', self.adjust_slider)
        s.connect('button-press-event', self.pause_playing)
        s.connect('button-release-event', self.resume_playing)
        self.paused = False
        self.last_manual = None

        # The image
        self.radar = RadarWidget(self)
        self.radar.connect('draw', self.radar.draw)
        vbox.pack_start(self.radar, False, False, 0)

        # Statusbar
        self.statusbar = sb = Gtk.Statusbar()
        vbox.pack_start(sb, False, False, 0)

        self.window.set_focus(None)
        if show_gui:
            self.window.show_all()

    def main(self):
        """Show the gui and run the mainloop. Also start the player"""
        GLib.idle_add(self.start_playing)
        GLib.timeout_add(900000, lambda: self.radar.clear_cache)
        Gtk.main()

    def quit(self, eventsrc, *args):
        """Quit the mainloop"""
        Gtk.main_quit()

    # Player control
    # start/stop and pause/resume are very similar, the difference is in what
    # calls them:
    # - start/stop are callbacks for the plau/pause button
    # - pause/resume are called when the slider is being dragged. Animation
    #   will continue when the slider is let go

    def start_playing(self):
        """Start the animation"""
        if self.playing:
            return
        self.playing = True
        self.playbutton.set_label(Gtk.STOCK_MEDIA_PAUSE)
        self.timer = GLib.timeout_add(self.timeout, self.play_step)

    def stop_playing(self):
        """Stop the animation"""
        if not self.playing:
            return
        GLib.source_remove(self.timer)
        self.playbutton.set_label(Gtk.STOCK_MEDIA_PLAY)
        self.playing = False

    def pause_playing(self, eventsrc, event):
        """Pause the animation"""
        if self.playing and not self.paused:
            self.stop_playing()
            self.paused = True
        self.window.set_focus(None)

    def resume_playing(self, eventsrc, event):
        """Continue the animation"""
        if self.paused and not self.playing:
            if self.last_manual:
                GLib.source_remove(self.last_manual)
                self.last_manual = None
            self.start_playing()
            self.paused = False
        self.window.set_focus(None)

    # GUI response

    def toggle_playing(self, eventsrc):
        """Callback for the plau/payse button"""
        if self.playing:
            self.stop_playing()
        else:
            self.start_playing()

    def adjust_slider(self, eventsrc, scrolltype, value):
        """Callback for when the slider is moved"""
        if self.last_manual:
            GLib.source_remove(self.last_manual)
            self.last_manual = None
        if self.playing:
            return
        step = int(self.steps * (1-value))
        self.last_step = step + 1
        # Use a timeout so we don't update the screen to often
        self.last_manual = GLib.timeout_add(50, self.play_step, False)
        self.window.set_focus(None)

    def set_seconds(self, seconds):
        self.seconds = seconds
        self.steps = self.seconds/self.country['interval']
        if self.last_step > self.steps:
            self.last_step = self.steps
        self.set_timeout(12000/self.steps)
        self.combo_box.set_active(self.hour_choices.index(seconds/3600))

    def key_release(self, eventsrc, event):
        key = Gdk.keyval_name(event.keyval).lower()
        if key == 'p':
            self.toggle_playing(eventsrc)
        elif key == 'left':
            self.stop_playing()
            self.last_step = (self.last_step+2) % (self.steps+1)
            self.play_step()
        elif key == 'right':
            self.stop_playing()
            self.play_step()
        elif key.isdigit() and int(key) in self.hour_choices:
            self.set_seconds(int(key) * 3600)
        else:
            for country in self.countries.values():
                if country['shortcut'] == key:
                    self.set_country(country=country)
                    break

    # Player/display functions

    def play_step(self, set_scale=True):
        """Advance the step counter and load the relevant image"""
        self.logger.info("Playing step: %d/%d" % (self.last_step, self.steps))

        # Too old? Maybe paused for a day
        if self.last_step != 0 and self.cycle_time < datetime.datetime.now() - datetime.timedelta(1,1800):
            self.last_step = 0
            return

        if self.last_step == 0:
            self.cycle_time = self.clamped_timestamp(datetime.datetime.now()) + datetime.timedelta(0,self.country['interval'])
            success = False
            while not success:
                self.cycle_time -= datetime.timedelta(0, self.country['interval'])
                success = self.radar.load_timestamp_image(self.country, self.cycle_time, True)
            self.last_step = self.steps
        else:
            self.last_step -= 1
            if self.last_step == 0 and not self.show_gui:
                sys.exit(0)

        self.radar.load_timestamp_image(self.country, self.cycle_time - datetime.timedelta(0, self.country['interval'] * self.last_step))

        if set_scale:
            self.scale.set_value(1-(0.0+self.last_step)/self.steps)
        self.window.set_focus(None)
        if self.last_step == 0 and not self.window:
            self.radar.clear_cache()
            self.quit(None)
        return self.playing

    def set_timeout(self, timeout):
        """Set the time between frames and restart the player"""
        self.timeout = timeout = max(100, timeout) # Timeout must be 100ms minimum
        if self.playing:
            self.stop_playing()
            self.start_playing()

    def clamped_timestamp(self, timestamp):
        """Returns the timestamp with second/microsecond set to 0 and minute to minute % self.interval"""
        return timestamp - datetime.timedelta(0, (timestamp.minute * 60 + timestamp.second) % self.country['interval'], timestamp.microsecond)

    # Other functions

    def init_logger(self, level):
        self.logger = l = logging.getLogger("buienradar")
        l.setLevel(level=level)
        c = logging.StreamHandler()
        c.setLevel(level=level)
        c.setFormatter(logging.Formatter("%(asctime)s - %(message)s"))
        l.addHandler(c)

    def set_country(self, eventsrc=None, country=None):
        self.country = country
        self.radar.set_background(country['abbr'], country['background'])
        if hasattr(self, 'seconds'):
            self.steps = self.seconds/country['interval']
            self.set_timeout(12000/self.steps)
        self.last_step = 0
        self.play_step()

    DOWNLOAD_TIMEOUT = 1001
    def downloading(self, am_downloading):
        if am_downloading:
            self.set_timeout(self.DOWNLOAD_TIMEOUT)
            if not self.dld:
                self.dld = self.statusbar.push(1, "Slowing down animation to download images")
        else:
            self.set_timeout(12000/self.steps)
            if self.dld:
                if hasattr(self.statusbar, 'remove_message'):
                    self.statusbar.remove_message(1, self.dld)
                elif hasattr(self.statusbar, 'remove'):
                    self.statusbar.remove(1, self.dld)
            self.dld = None

    def error(self, message):
        if self.ignore_errors:
            return
        self.stop_playing()
        error_dlg = Gtk.MessageDialog(self.window,  0, Gtk.MessageType.ERROR, Gtk.ButtonsType.OK, message)
        error_dlg.run()
        error_dlg.destroy()
        return

class RadarWidget(Gtk.DrawingArea):
    cache_dir = os.path.join(os.path.expanduser('~'), '.cache', 'buienradar')

    def __init__(self, program):
        super(RadarWidget, self).__init__()
        self.images = {}
        self.program = program
        self.logger = program.logger
        self.current = None

        # Make sure we can store our images
        if not os.path.exists(self.cache_dir):
            os.makedirs(self.cache_dir)

    def set_background(self, tag, url):
        self.background = self.load_image('bg_%s.gif' % tag, url)
        self.set_size_request(self.background.get_width(), self.background.get_height())
        self.queue_draw()

    def draw(_, self, ctx):
        self.override_background_color(Gtk.StateFlags.NORMAL,Gdk.RGBA(0,0,0,1))
        ctx.set_source_surface(self.background, 0, 0)
        ctx.paint()
        if self.current:
            ctx.set_source_surface(self.current, 0, 0)
        ctx.paint()

    def load_timestamp_image(self, country, timestamp, ignore_errors=False):
        """Load the relevant image for the timestamp. Will try to download images and
           will also try to download older images if the current one is not yet
           available. Return value is the timestamp for the image actually loaded.
           This may differ trom the timestamp argument."""

        # Have we cached this image in memory?
        img = "%s_%s.%s" % (timestamp.strftime('%Y-%m-%d_%H-%M'), country['abbr'], country['format'])
        url = country['imgurl'] % {
                'year': timestamp.year,
                'month': timestamp.month,
                'day': timestamp.day,
                'hour': timestamp.hour,
                'minute': timestamp.minute}

        img = self.load_image(img, url, ignore_errors)
        if not img:
            return None

        # Now write, my precious!
        self.current = img
        self.queue_draw()

        return True

    def load_image(self, img, url, ignore_errors=False):
        if img in self.images:
            self.program.downloading(False)
            return self.images[img]

        img = os.path.join(self.cache_dir, img)
        if os.path.exists(img):
            self.program.downloading(False)
        else:
            self.logger.info("Downloading %s -> %s" % (url, img))
            self.download(url, img, ignore_errors)

        if not os.path.exists(img):
            return None

        self.logger.info("Loading %s" % img)

        # Load gif via PIL, convert to cairo surface
        imgd = Image.open(img)
        w, h = imgd.size
        stride = w * 4
        imgd = imgd.convert('RGBA').tostring()
        imgd = array.array('B',imgd)
        for i in range(0, len(imgd), 4):
            imgd[i], imgd[i+2] = imgd[i+2], imgd[i]
        self.images[os.path.basename(img)] = imgd = cairo.ImageSurface.create_for_data(imgd, cairo.FORMAT_ARGB32, w, h, stride)
        return imgd

    def download(self, url, filename, ignore_errors=False):
        self.program.downloading(True)
        try:
            req = urllib2.urlopen(url)
        except urllib2.URLError:
            # Failed to download image
            if ignore_errors:
                return None
            self.program.error("Failed to download image. Check your internet connection and proxy settings")
            return None

        img = req.read()
        if len(img) < 1000:
            # Failed to download image
            if ignore_errors:
                return None
            self.program.error("Failed to download image. Check your internet connection and proxy settings")
            return None
        # Cache the image
        fd = open(filename, 'w')
        fd.write(img)
        fd.close()

    saturation_factor = 0.25
    saturation_base = 1 - saturation_factor
    saturation_offset = 1.0 / 12
    def saturation(self, timestamp):
        """Return the saturation for the time, making images darker or not.
           Currently this is a naive cosine with a 2h offset making 02:00
           the darkest and 14:00 the lightest"""
        ts = (timestamp.hour * 60.0 + timestamp.minute) / 1440.0 - self.saturation_offset
        sat = self.saturation_base - self.saturation_factor * math.cos(ts * 2.0 * math.pi)
        self.logger.debug("Saturation for %s: %f" % (timestamp.strftime("%H:%M"), sat))
        return sat

    def clear_cache(self, age=87300):
        """Remove all downloaded image files and clean the memory cache"""
        max_age = datetime.datetime.now() - datetime.timedelta(0, age)
        max_age_str = max_age.strftime('%Y-%m-%d_%H-%M')
        for f in os.listdir(self.cache_dir):
            if f < max_age_str:
                self.logger.info("Deleting %s" % f)
                os.unlink(os.path.join(self.cache_dir, f))
        for k in self.images.keys():
            if k[0] < max_age_str:
                self.logger.debug("Forgetting %s image for %s" % (k[1], k[0].strftime("%Y-%m-%d %H:%M")))
                del self.images[k]

        # This is called from a timeout_add callback, so return True to keep the
        # loop alive.
        return True

if __name__ == '__main__':
    from optparse import OptionParser, OptionConflictError
    br = BuienRadar()
    parser = OptionParser()
    parser.add_option('-v', '--verbose', action='count', dest='verbosity',
                      help="Verbose output (use twice for higher verbosity)")
    parser.add_option('--no-gui', action='store_false', dest='gui', default=True,
                      help="Don't show a gui, just download images")

    for hour in br.hour_choices:
        if hour < 10:
            opts = ('-%d' % hour, '--%d' % hour)
        else:
            opts = ('--%d' % hour,)
        parser.add_option(*opts, dest='seconds', default=10800,
                          action='store_const', const=hour * 3600,
                          help="Show a %d hour loop" % hour)
    for c in sorted(br.countries.values(), key=lambda x: x['abbr']):
        parser.add_option('-' + c['shortcut'], '--' + c['abbr'], dest='country', default='eu',
                          action='store_const', const=c['abbr'],
                          help="Show radar for %s" % c['country'])
    options, args = parser.parse_args()
    if args:
        parser.print_help()
        sys.exit(1)

    loglevel = {1: logging.INFO, 2: logging.DEBUG}.get(options.verbosity, logging.WARNING)
    br.logger.setLevel(loglevel)

    br.create_gui(options.gui)
    br.set_seconds(options.seconds)
    br.set_country(country=br.countries[options.country])
    br.main()

# `Now you see it,' said the bird. `Now you don't.'
# - Douglas Adams, Mostly Harmless
